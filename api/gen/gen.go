// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload retake data for students or teachers
	// (POST /admin/upload-retake-data)
	UploadRetakeData(c *gin.Context)
	// Upload student retake data
	// (POST /admin/upload-student-retakes)
	UploadStudentRetakes(c *gin.Context)
	// Upload teacher retake data
	// (POST /admin/upload-teacher-retakes)
	UploadTeacherRetakes(c *gin.Context)
	// User login (Student, Teacher, Admin)
	// (POST /auth/login)
	Login(c *gin.Context)
	// Get retake debt information for a student
	// (GET /student/debt-info)
	DebtInfo(c *gin.Context)
	// Request retake details (date, time, address) from teacher
	// (POST /student/retake-request)
	StudentRetakeRequest(c *gin.Context)
	// Get retake information for teacher
	// (GET /teacher/retake-info)
	TeacherRetakeRequest(c *gin.Context)
	// Update retake details (date, time, or address) for a subject
	// (POST /teacher/update-retake)
	TeacherUpdateRetake(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UploadRetakeData operation middleware
func (siw *ServerInterfaceWrapper) UploadRetakeData(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadRetakeData(c)
}

// UploadStudentRetakes operation middleware
func (siw *ServerInterfaceWrapper) UploadStudentRetakes(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadStudentRetakes(c)
}

// UploadTeacherRetakes operation middleware
func (siw *ServerInterfaceWrapper) UploadTeacherRetakes(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadTeacherRetakes(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// DebtInfo operation middleware
func (siw *ServerInterfaceWrapper) DebtInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DebtInfo(c)
}

// StudentRetakeRequest operation middleware
func (siw *ServerInterfaceWrapper) StudentRetakeRequest(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StudentRetakeRequest(c)
}

// TeacherRetakeRequest operation middleware
func (siw *ServerInterfaceWrapper) TeacherRetakeRequest(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TeacherRetakeRequest(c)
}

// TeacherUpdateRetake operation middleware
func (siw *ServerInterfaceWrapper) TeacherUpdateRetake(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TeacherUpdateRetake(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/admin/upload-retake-data", wrapper.UploadRetakeData)
	router.POST(options.BaseURL+"/admin/upload-student-retakes", wrapper.UploadStudentRetakes)
	router.POST(options.BaseURL+"/admin/upload-teacher-retakes", wrapper.UploadTeacherRetakes)
	router.POST(options.BaseURL+"/auth/login", wrapper.Login)
	router.GET(options.BaseURL+"/student/debt-info", wrapper.DebtInfo)
	router.POST(options.BaseURL+"/student/retake-request", wrapper.StudentRetakeRequest)
	router.GET(options.BaseURL+"/teacher/retake-info", wrapper.TeacherRetakeRequest)
	router.POST(options.BaseURL+"/teacher/update-retake", wrapper.TeacherUpdateRetake)
}
